// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

#include "mongodb/mongodb.h"
#include "thriftsample/Serv.h"

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace mongodb;


class ServHandler: virtual public ServIf {
public:
    ServHandler() {
        // Your initialization goes here
        MongoDb::getInstance();
    }

    void put(const Student& s) {
        // Your implementation goes here
        printf("sno=%d sname=%s ssex=%d sage=%d\n", s.sno, s.sname.c_str(), s.ssex, s.sage);

        mongo::BSONObjBuilder b;
        b.append("sno", s.sno);
        b.append("sname", s.sname.c_str());
        b.append("ssex", s.ssex);
        b.append("ssage", s.sage);
        mongo::BSONObj student = b.obj();

        MongoDb::getInstance()->insert("tutorial.students", student);
        std::cout << "Inserted student:" << student << std::endl;
    }

};

int main(int argc, char **argv) {
    int port = 9090;
    shared_ptr<ServHandler> handler(new ServHandler());
    shared_ptr<TProcessor> processor(new ServProcessor(handler));
    shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
    shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
    shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

    TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
    server.serve();
    return 0;
}

